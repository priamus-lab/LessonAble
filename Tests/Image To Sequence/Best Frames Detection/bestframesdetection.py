# -*- coding: utf-8 -*-
"""BestFramesDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hgxzuwgu5jxTdS1EPRH53BGAYaIE_WV4
"""

import cv2
import numpy as np
import face_recognition
import uuid
import os
from PIL import Image

"""**Detect scene content changes in a video**"""

def detectDifferentScenes(videoURL, outputURL):
  !scenedetect -i {videoURL} -o outputURL -s videoStats.csv detect-content list-scenes save-images

def checkFaceToTarget(know_imageURL, unknown_imageURL):
  known_image = face_recognition.load_image_file(know_imageURL)
  unknown_image = face_recognition.load_image_file(unknown_imageURL)

  target_encoding = face_recognition.face_encodings(known_image)[0]
  unknown_encoding = face_recognition.face_encodings(unknown_image)[0]

  results = face_recognition.compare_faces([target_encoding], unknown_encoding)
  return results

"""**Crop face from photo and get confidence related to the similarity of the cropped face to the targets one**


"""

def getFacesFromPhotoSimilarToTarget(targetURL, unknownImageURL, outputURL):
  face_crop = []
  confidences = []

  # Load in color image for face detection
  image = cv2.imread(unknownImageURL)
# Convert the image to RGB colorspace
  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
# Make a copy of the original image to draw face detections on
  image_copy = np.copy(image)
# Convert the image to gray 
  gray_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
# Load the cascade
  face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_alt2.xml')
# Detect faces in the image using pre-trained face dectector
  faces = face_cascade.detectMultiScale(gray_image)

  #get the cropped faces
  for f in faces:
    x, y, w, h = [ v for v in f ]
    face_crop.append(image_copy[y:y+h, x:x+w])
  
  target_image = cv2.imread(targetURL)
  urlDetectedFaces = []
  for face_image in face_crop:
    croppedFaceURL = outputURL + str(uuid.uuid4()) + ".jpg"
    im = Image.fromarray(face_image)
    im.save(croppedFaceURL)
    results = checkFaceToTarget(targetURL, croppedFaceURL)
    if results[0] == True:
      urlDetectedFaces.append(croppedFaceURL)
    else:
      os.remove(croppedFaceURL)
  return urlDetectedFaces